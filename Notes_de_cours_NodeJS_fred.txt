cours ORSYS du 5 au 8 avril 2022 sur Node JS
--------------------------------------------
jlg-consulting.com
https://jlg-consulting.com/orsys/ => a voir
github => jlg-formation/njsph1-avril-22.git

accessibilité obligatoire pour les sites web RGAA https://www.numerique.gouv.fr/uploads/rgaa/RGAA-v4.1.pdf
ctrl + shift + L => console.log dans vscode

GITHUB 
creer un depot 
git remote add origine https://github.com/jlg-formation/njsph1-avril-22.git
git push -u origine master

Objectifs pédagogiques
1°) Installer et configurer un serveur Node.js
2°) Mettre en œuvre les concepts de la programmation événementielle et asynchrone
3°) Mettre en place un framework Web
4°) Manipuler l'API de Node.js
5°) Gérer la persistance dans une base de données NoSQL avec un ODM


1°) Installer et configurer un serveur Node.js
https://nodejs.org/en/ => install
https://github.com/coreybutler/nvm-windows/releases => pour nvm-windows
nvm install lts ou nvm install latest
nvm use 17.8.0
nvm list
https://git-scm.com/
Visual Studio Code => cmd => code
https://tortoisegit.org/download/
plugin surround => selectionner puis ....


setting => cherche et cocher editing html 
plugin install Angular Language Service
plugin install TypeScript Class Organizer  

install https://prettier.io/ pour la mise en forme puis dans code click droit '"mettre en forme"
mettre en anglais
preference => Format On Save (ca met en forme automac)
et format document whit dans un click droit 

module node https://www.npmjs.com/


git config --global user.name "frederic"
git config --global user.email "frederic.jaimes@ratp.fr"

mettre a jour VScode => reload windows

plugin VSCODE
javascript console utils => on selection la variable puis ctrl + shift + L est sa mette un console.log :D
prettier
git graph
JavaScript and TypeScript Nightly
on renomme le fichier server.js en server.ts
puis on va recompiler avec npx tsc --target ES2018 server.ts (qui genere server.js
on install aussi error lens pour afficher directement l'erreur dans le code.

 
 install JavaScript (ES6) code snippets pour VSCODE
 install extention chrome 
 json-formater => https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa?hl=fr
 
 

2°) Mettre en œuvre les concepts de la programmation événementielle et asynchrone
dans le repertoire => cmd => git init
puis ouvrir code dans le repertoire de travail 
on crée un fichier server.js puis on le lance avec cmd "node server.js

info
npm => gere le package
npx => 
semver.org pour les version.


npm init -y
rpm i express
les modules node sont un repertoire qui contient un fichier package.json

mettre  dans le repertoire back .gitignores => node_modules # on neva pas commit les modules 

pour info => https://www.conventionalcommits.org/en/v1.0.0/ => pour les messages

npm install serve-index

info => https://developer.mozilla.org/fr/docs/Web/HTTP/Methods
-----------
HTTP requete 
POST /titi/toto HTTP/2.0
Host: www.orsys.fr
cle: valeur
dzssd: dssdsd
Content-Type:Text/plain
Content-Length: 12  # body de 12 caracteres

dsf
fd
fds
fsd #12 caracteres
---------------
HTTP reponse
HTTP/1.1 201 created
cle: valeur
dzssd: dssdsd
Content-Length: 12  # body de 12 caracteres
Content-Type:application/json

{"toto":123} #12 caracteres

---------
nodemon est un utilitaire d'interface de ligne de commande (CLI) développé par @rem. 
Il enveloppe votre application Node, surveille le système de fichiers et redémarre automatiquement 
le processus. Cet article vous permettra d'en apprendre davantage sur l'installation, le réglage et la 
configuration de nodemon
ca redemarre le server automatique a chaque modification !!!!

npm i nodenom -D
npx nodemon server.js

on peut aussi modifier la fichier package.json pour mettre  "start": "nodemon" 
puis on demarrera le projet avec npm start 


se creer un compte sur npmjs

typescript
npm i --save-dev @types/node
npx tsc server.ts
il va compiler le fichiers server.ts et recréer un fichier server.js avec quelques modif pour optimiser et rendre compatible le code 


anciennement on declarer les variable en var, maintenant c'est let et const
const pour les variablenon modifiable
let variable modifiable
on peux modifier const a = {toto: 13}
a.titi = 14
on utilise au max const sauf dans les boucles.


titi.call("tat", "dddd", "deddd"); ou titi.bind(); va appeler une focntion avec argument ou pas 


npm i ts-node -D
pour lire directement du ts sur node
 npx ts-node server.ts
 
 pour lancer le projet on modifie le package.json
 "start": "npx nodemon server.ts"
 puis dans un terminal on fait un : npm start 

 
 Mettre en production
 on va compiler le code pour le transformer de TS en JS pour le server
 npx tsc
 il va genere le fichier server.js dans le repertoire ./dist
 est on test node dist/server.js
 
 ou 'npm run build' si declarer dans package.json avec "build": "tsc",
 et/ou demarage auto avec compilation avec 
 "build": "tsc",
 "start:prod": "node dist/server.js"
 puis 'npm run start:prod' 
 
 pour spécifier le port
 "start:prod": "set PORT=3333 && node dist/server.js"
 et dans le code 
 const port = +process.env.PORT || 3000; // je prend la variable d'environnement ou 3000 si je trouve pas 
 le + devant le string transforme en number
 
 install "dotenv" pour pourvoir mettre les variable en fichier // npm -i dotenv
 a mettre dans un fichier dans le repertoire node_modules
 cree .env et mettre PORT=4545
 
  npm run build
  npm run start:prod
  
  
on install PM2 cote server pour la prod (voir le site)
faut creer un fichier ecosystem.config.js et lancer
pm2 start ecosystem.config.js --env production
ca peut etre coupler avec NGINX
 

 On s'occupe du FRONT (Angular)
 ------------------------------
 npm install -g @angular/cli => https://angular.io/
 pour les graphique char.js
 >ng new front et on choisi SCSS
 cd front
 npm start qui demarre direct le server localhost:4200
 
 ANGULAR
 5 artefacts
	Composant
	Modules (paquets d'artefacts)
	Directives (composant sans parti visuel)
	Pipe 
	Service
 
 https://refactoring.guru/
 
 
 on cree un module 
 ng generate module layout -m app (-d pour de faux, pour tester) 
 
 maintenant on crée la page html qui est composé du header, body, footer attaché au layout
 >ng g c layout/header -d ( on retire le -d)
 >ng g c layout/header --export
 >ng g c layout/body --export
 >ng g c layout/footer --export
 
 pour les images svg (image legere) https://www.iconfinder.com/search?q=stock
 
 pour du confort sur les racourcie, faut changer le raccourcie de emmett "tab" et remplacer par ctrl+e
 prefernece => raccourcie clavier => ctrl+ecosystem
 puis dans C:\Users\orsys\AppData\Roaming\Code\User\keybinding.json, on garde que key et command.
 
 install plugin SVGpour VSCODE
 
 on modifie le scss et pour le site, on modifie styles.scss
 dans .browserlistrc, on configure les browser autorisé.
npm install normalize.css => https://caniuse.com/?search=fullscreen pour voir les compatibilités
a voir aussi le flex => https://css-tricks.com/
npm install  sanitize.css
 voir https://www.w3schools.com/html/default.asp pour la doc html, JS et plus encore
 
 Actuce : 
 Selection + ctrl + D => multi selection pour modifier plusieurs a la fois
 
1°)creation des compasants de routs
pour les page static, on va creer des routes vers les page static "mention legale" et "home"
ng g c routes/home -d pour tester puis on retire le -d 
ng g c routes/legale -d
c'est ajouter dans le app.modules.ts
2°) mapper des composants a des url dans app.routing
app-routing.modules.ts
import { HomeComponent } from './routes/home/home.component';
import { LegaleComponent } from './routes/legale/legale.component';
const routes: Routes = [
{path: '', component: HomeComponent},
{path: 'legal', component: LegalComponent}
];
3°) dire dans layout/body le retour
dans body.component.html 
<router-outlet> </router-outlet> 
dans layout.module.ts importer le module de <router-outlet> 
grace à 
import { RouterModule } from '@angular/router';
et le mettre ussi dans les import : imports: [CommonModule, RouterModule],
4°) poser les liens dans footer et header
footer.component.html, remplacer le href par routerLink
<a routerLink='/legal"> Mention legale</a> /
et dans header.composent.html 
<a routerLink='/"> gestion stock</a> //c'est pas href

== autre exercice pour voir les stocks (Lazy Loading)
on rajoute un page, ais aussi son modules (stock)et ses routes (stockrouting)
ng g m stock --route stock -m app -d
ca fait un import dynamique comme un bundle, charger pendant l'execution si besoin.

puis dans le home.component.html
<button routerLink="/stock">Voir le stock</button>

pour ajouter un omposant pour ajouter
ng g c stock/add -d
on ajoute la route et l'import dans stock-routing.modules.ts 
import { AddComponent } from './add/add.component';
const routes: Routes = [
  { path: '', component: StockComponent },
  { path: 'add', component: AddComponent },
];
puis on rajoute dans le html



creation d'un service
ng g s services/article -d => relier à app

creation d'un interfaces pour creer une class
ng g interface interfaces/article

info => https://reactivex.io/ donne le resultat au compte goute


librairie CORS pour laisser passer les request sur un autre server
npm i cors

freecamp